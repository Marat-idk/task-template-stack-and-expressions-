#ifndef POLIZ_H
#define POLIZ_H

#include "stack.h"
#include <string>
using namespace std;

// для начала выражение буду переводить ПОЛИЗ и преобразованное в Обратную Польскую Запись выражение будет
// храниться в строке стринг. Всё будет выполняться по след. алгоритму
/*
Рассматриваем поочередно каждый символ :
1. Если этот символ - число(или переменная), то просто помещаем его в выходную строку.
2. Если символ - знак операции(+, -, *, / ), то проверяем приоритет данной операции.Операции умножения и 
деления имеют наивысший приоритет(допустим он равен 3).Операции сложения и вычитания имеют меньший приоритет(равен 2).
Наименьший приоритет(равен 1) имеет открывающая скобка.
Получив один из этих символов, мы должны проверить стек :
	а) Если стек все еще пуст, или находящиеся в нем символы(а находится в нем могут только знаки операций и открывающая скобка) 
	имеют меньший приоритет, чем приоритет текущего символа, то помещаем текущий символ в стек.
	б) Если символ, находящийся на вершине стека имеет приоритет, больший или равный приоритету текущего символа, 
	то извлекаем символы из стека в выходную строку до тех пор, пока выполняется это условие; затем переходим к пункту а).
3. Если текущий символ - открывающая скобка, то помещаем ее в стек.
4. Если текущий символ - закрывающая скобка, то извлекаем символы из стека в выходную строку до тех пор, пока не встретим в стеке 
открывающую скобку(т.е.символ с приоритетом, равным 1), которую следует просто уничтожить.Закрывающая скобка также уничтожается.
*/
void expressionToPoliz(char *expr, string& poliz);

// для получения приоритета символа (3, 2 или 1)
int getPriority(char ch);

// а) Если стек все еще пуст, или находящиеся в нем символы(а находится в нем могут только знаки операций и открывающая скобка) 
// имеют меньший приоритет, чем приоритет текущего символа, то помещаем текущий символ в стек.
//!!! Вынес в отдельную функцию, так как в пункте б) нужно будет несколь раз переходить к пунту а)
void stepA(char expr, string& poliz, Stack<char>& temp);


double colculatePoliz(const string& poliz);

int characterToDigit(char ch);
int getValue(string &str, int count);
double sumValue(int x, int y, char ch);

#endif // !POLIZ_H
